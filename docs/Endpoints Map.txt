/users:
	/login:
		POST():
		Request Body:
		{
			"username": "parent1",
			"password": "parent1"
		}
		Response Header:
		Authorization <JWT>  (To access endpoints that need Authorization JWT must have Bearer prefix)

	GET(): Return all users.
	Response Body:
	[
  		{
			"username": "admin",
			"password": "admin",
			"email": "admin@mail.com",
			"image": "www.google.com",
			"balance": 10,
			"active": true,
			"admin": true
		}, ...
  	]
	POST(User): Create new User if user.username doesn't exist or isn't given, else Update User. Return User or ErrorMessage.
	Request Body (to create new user - isActive default true, isAdmin default false):
	{
		"username": "testNewUser",
		"password": "admin",
		"email": "admin@mail.com",
		"image": "www.updatedImage.com",
		"balance": 10
	}

	Request Body (to update existing user):
	{
		"username": "admin",
		"password": "admin",
		"email": "admin@mail.com",
		"image": "www.updatedImage.com",
		"balance": 10,
		"active": true,
		"admin": true
	}

	/user_username:
		GET(): Return user.
		Response Body (for GET at {{home}}/users/testNewUser):
		{
			"username": "testNewUser",
			"password": "admin",
			"email": "admin@mail.com",
			"image": "www.updatedImage.com",
			"balance": 10,
			"active": true,
			"admin": false
		}
		Delete(): Delete user, retrun User or ErrorMessage.
		Response Body (for DELETE at {{home}}/users/testNewUser):
		{
			"username": "testNewUser",
			"password": "admin",
			"email": "admin@mail.com",
			"image": "www.updatedImage.com",
			"balance": 10,
			"active": true,
			"admin": false
		}
	
/activities:
	GET(): Return all activities.
	POST(Activity): Create activity if activity.id doesn't exist or isn't given, else Update Activity. Return Activity or ErrorMessage.

	/approved:
		GET(): Return approved activities.

	/notApproved:
		GET(): Return not (yet) approved activities

	/activity_id:
		GET(): Return activity.
		DELETE(): Delete activity, retrun Activity or ErrorMessage.

/sellers:
	GET(): Return all sellers.
	POST(Seller): Create new User if seller.id doesn't exist or isn't given, else Update Seller. Return Seller or ErrorMessage.
	/seller_id:
		GET(): Return seller.
		DELETE(): Delete Seller, retrun Seller or ErrorMessage.
		/reservations:
			GET(): Return all reservations for seller's activities
			/reservation_id:
				GET(): Return reservation of seller's activity.
		/account:
			GET(): Return seller's accounts.
			POST(Account): Create account for seller if account.id doesn't exist or isn't given, else Update Account. Return Account or ErrorMessage.
			/account_id:
				Delete(): Delete acount, return Account or ErrorMessage.
		/activities:
			GET(): Return seller's activities.
			POST(Activity): Create new seller's activity, return Activity or ErrorMessage.
			/activity_id:
				GET(): Return seller's activity.

/parents:
	GET(): Return all parents.
	Post(Parent): Create new Parent if parent.id doesn't exist or isn't given, else Update Parent. Return Parent or ErrorMessage.
	/parent_id    
    		Delete(): Delete parent, return Parent or ErrorMessage.
		GET(): Return parent.
    		/card:
       			GET(): Return user's card.
        		Post(Card): Create card for user if card.id doesn't exist or isn't given, else Update Card. Return Card or ErrorMessage.
        		/card_id
        			Delete(): Delete card, return card or ErrorMessage.
		/reservations:
			GET(): Return all reservations for parent's activities
			/reservation_id:
				GET(): Return reservation of parent's activity.
		/activities:
			GET(): Return seller's activities.
			POST(Activity): Create new seller's activity if activity.id doesn't exist or isn't given, else Update Activity. Return Activity or ErrorMessage.
			/activity_id:
				GET(): Return seller's activity.


