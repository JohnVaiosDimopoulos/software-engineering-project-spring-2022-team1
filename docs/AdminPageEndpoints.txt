Όλα χρειάζονται token με ρόλο "ROLE_ADMIN"

UserCreationRequest{
    string name,
    string email,
    string password,
    string role
}

+{Post("/admin/create_user)
    RequestBody{
        string name,
        string email,
        string password,
        string role     //role = ["ROLE_PARENT", "ROLE_SELLER", "ROLE_ADMIN"]
    }
    ResponseBody{
        <user_data>
    }
}

+{Get("/admin/stats")
    RequestBody{
        "sellers": 10,
        "parents": 20,
        "activities": 30
    }
}

UserCompact{
    "username": parent1,
    "role": "ROLE_PARENT",
    "status": "blocked"     //status = ["active", "blocked"]
}

+ {Get("/admin/get_users/?username=parent1&pageNumer=1&pageSize=10")
    αν το username δεν δίνεται ή είναι κενό String (/admin/get_users/?username=) επιστρέφονται όλοι οι χρήστες
    RequestBody{
        "page":[
            <UserCompact>,
            .
            .
            .
            <UserCompact>
        ],
        "total_pages": 10,
        "current_page": 1
    }
}

ReservationDTO{
    string name,
    string seller_name,
    LocalData reservation_date,
    LocalDate reservation_time,
    int amount
}
+{Get("/admin/get_parent_reservations/{username}?pageNumer=1&pageSize=10)
    ResponseBody{
        "page": [
            <ReservationDTO>,
            .
            .
            .
            <ReservationDTO>
        ],
        "total_pages": 10,
        "current_page": 1
    }
}

ActivityDTO{
    string name,
    string seller_name,
    LocalData start_date,
    LocalDate end_date,
    int price
}
+{Get("/admin/get_seller_activities/{username}?pageNumer=1&pageSize=10)
    ResponseBody{
        "page": [
            <ActivityDTO>,
            .
            .
            .
            <ActivityDTO>
        ],
        "total_pages": 10,
        "current_page": 1
    }
}

+ {GET(/admin/activity/{activity_id})
    Περιγραφή:
    Εκτεταμένη περιγραφή δραστηριότητας με activity.id = activity_id που δεν εχει εγκριθεί
    ResponseBody{
        <ActivityExtendedDTO>
    }
}

Post("admin/login")
RequestBody{
    "username": "admin",
    "password": "admin"
}
Response Header ("authorization", JWT)

Post("admin/quick_login)
Request Header ("authorization", "Bearer " + JWT)
Response Header ("authorization", JWT)

+{Get("/admin/user/{username}")
    ResponseBody{
        "username": "parent1",
        "status": "active",
        "image": "http:...",
        "role": "PARENT_ROLE"

    }
}

+{Post("admin/change_password/{username}")
    RequestBody{
        "password": 1234
    }
}

+Post("/admin/set_active/{username}")

+Post("/admin/set_blocked/{username}")

+{Post("/admin/change_role/{username}")
    RequestBody{
        "role": "ROLE_PARENT"
    }
}

+{Get("/admin/pending_activities?pageNumber=1&pageSize=40")
    Επιστρέφει τις δραστηριότητες που περιμένουν έγκριση ή απόρριψη.
    ResponseBody{
    [
        <ActivityDTO>,
        .
        .
        .
    ]
    }
}

+{Post("/admin/activity/{id}/approve)
    Εγκρίνει την δραστηριότητα με activity.id = id. Επιστρέφει τα ενημερωμένα στοιχεία της δραστηριότητας.
    ResponseBody{
        <activity_data>
    }
}

+{Delete("/admin/activity/{id})
    Διαγράφει την δραστηριότητα με activity.id = id. Επιστρέφει την δραστηριότηα που διαγράφτηκε
    ResponseBody{
        <activity_data>
    }
}